(in-package :mu-cl-resources)

;;;;
;; NOTE
;; docker-compose stop; docker-compose rm; docker-compose up
;; after altering this file.

;; Describe your resources here
(define-resource event ()
  :class (s-prefix "schema:Event")
  :properties `((:created :string , (s-prefix "dcterms:created"))
								(:modified :string ,(s-prefix "dcterms:modified"))
								(:is-wheelchair-unfriendly :boolean,(s-prefix "gf:isWheelchairUnfriendly"))
								(:description :string ,(s-prefix "schema:description"))
								(:end-date :date ,(s-prefix "schema:endDate"))
								(:start-date :date ,(s-prefix "schema:startDate"))
								(:identifier :string ,(s-prefix "schema:identifier"))
								(:language :string ,(s-prefix "schema:inLanguage"))
								(:free :boolean ,(s-prefix "schema:isAccessibleForFree"))
								(:keywords :string ,(s-prefix "schema:keywords"))
								(:name :string ,(s-prefix "schema:name"))
								(:url :string ,(s-prefix "schema:url"))
								(:duration :string ,(s-prefix "schema:duration"))
								(:frequency :string ,(s-prefix "schema:frequency"))
								(:typical-age-range :string ,(s-prefix "schema:typicalAgeRange"))
	              (:is-part-of :string ,(s-prefix "schema:isPartOf")))
  :has-many `((event :via ,(s-prefix "schema:subEvent") :as "sub-events")
						  (theme :via ,(s-prefix "dcterms:subject") :as "category"))
  :has-one  `((event :via ,(s-prefix "schema:superEvent") :as "super-event")
						  (location :via ,(s-prefix "schema:location") :as "location")
							(contact-point :via ,(s-prefix "schema:contactPoint") :as "contact-point")
							(organizer :via ,(s-prefix "schema:organizer") :as "organizer"))
	:resource-base (s-url "http://gentse-feesten.stad.gent/event/")
  :on-path "events")

(define-resource location ()
	:class (s-prefix "schema:Place")
  :properties `((:created :string ,(s-prefix "dcterms:created"))
								(:modified :string ,(s-prefix "dcterms:modified"))
								(:name :string ,(s-prefix "schema:name"))
								(:is-wheelchair-unfriendly :boolean ,(s-prefix "gf:isWheelchairUnfriendly")))
	:has-one `((address :via ,(s-prefix "schema:address") :as "address"))
  :resource-base (s-url "http://gentse-feesten.stad.gent/place/")
  :on-path "locations")

(define-resource address ()
	:class (s-prefix "schema:PostalAddress")
:properties `((:created :string ,(s-prefix "dcterms:created"))
								(:modified :string ,(s-prefix "dcterms:modified"))
								(:country :string ,(s-prefix "schema:addressCountry"))
								(:locality :string ,(s-prefix "schema:addressLocality"))
								(:postal-code :string ,(s-prefix "schema:postalCode"))
								(:street-address :string ,(s-prefix "schema:streetAddress")))
  :resource-base (s-url "http://gentse-feesten.stad.gent/address/")
  :on-path "address")
	
(define-resource theme ()
	:class (s-prefix "skos:Concept")
  :properties `((:created :string ,(s-prefix "dcterms:created"))
								(:modified :string ,(s-prefix "dcterms:modified"))
								(:name :string ,(s-prefix "skos:prefLabel")))
  :resource-base (s-url "http://gentse-feesten.stad.gent/category/")
  :on-path "categories")

(define-resource contact-point ()
	:class (s-prefix "schema:contactPoint")
  :properties `((:created :string ,(s-prefix "dcterms:created"))
								(:modified :string ,(s-prefix "dcterms:modified"))
								(:name :string ,(s-prefix "schema:name")))
  :resource-base (s-url "http://gentse-feesten.stad.gent/contact-point/")
  :on-path "contact-points")

(define-resource organizer ()
	:class (s-prefix "schema:Organisation")
  :properties `((:created :string ,(s-prefix "dcterms:created"))
								(:modified :string ,(s-prefix "dcterms:modified"))
								(:name :string ,(s-prefix "schema:name")))
  :resource-base (s-url "http://gentse-feesten.stad.gent/organisations/")
  :on-path "contact-points")

;; An example setup with a catalog, dataset, themes would be:
;;
;; (define-resource catalog ()
;;   :class (s-prefix "dcat:Catalog")
;;   :properties `((:title :string ,(s-prefix "dct:title")))
;;   :has-many `((dataset :via ,(s-prefix "dcat:dataset")
;;                        :as "datasets"))
;;   :resource-base (s-url "http://webcat.tmp.semte.ch/catalogs/")
;;   :on-path "catalogs")

;; (define-resource dataset ()
;;   :class (s-prefix "dcat:Dataset")
;;   :properties `((:title :string ,(s-prefix "dct:title"))
;;                 (:description :string ,(s-prefix "dct:description")))
;;   :has-one `((catalog :via ,(s-prefix "dcat:dataset")
;;                       :inverse t
;;                       :as "catalog"))
;;   :has-many `((theme :via ,(s-prefix "dcat:theme")
;;                      :as "themes"))
;;   :resource-base (s-url "http://webcat.tmp.tenforce.com/datasets/")
;;   :on-path "datasets")

;; (define-resource distribution ()
;;   :class (s-prefix "dcat:Distribution")
;;   :properties `((:title :string ,(s-prefix "dct:title"))
;;                 (:access-url :url ,(s-prefix "dcat:accessURL")))
;;   :resource-base (s-url "http://webcat.tmp.tenforce.com/distributions/")
;;   :on-path "distributions")

;; (define-resource theme ()
;;   :class (s-prefix "tfdcat:Theme")
;;   :properties `((:pref-label :string ,(s-prefix "skos:prefLabel")))
;;   :has-many `((dataset :via ,(s-prefix "dcat:theme")
;;                        :inverse t
;;                        :as "datasets"))
;;   :resource-base (s-url "http://webcat.tmp.tenforce.com/themes/")
;;   :on-path "themes")

;;
